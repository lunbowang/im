// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: application.sql

package db

import (
	"context"
	"time"
)

const createApplication = `-- name: CreateApplication :exec
insert into applications (account1_id, account2_id, apply_msg, refuse_msg)
VALUES ($1, $2, $3, '')
`

type CreateApplicationParams struct {
	Account1ID int64
	Account2ID int64
	ApplyMsg   string
}

func (q *Queries) CreateApplication(ctx context.Context, arg *CreateApplicationParams) error {
	_, err := q.db.Exec(ctx, createApplication, arg.Account1ID, arg.Account2ID, arg.ApplyMsg)
	return err
}

const deleteApplication = `-- name: DeleteApplication :exec
delete
from applications
where account1_id = $1 and account2_id = $2
`

type DeleteApplicationParams struct {
	Account1ID int64
	Account2ID int64
}

func (q *Queries) DeleteApplication(ctx context.Context, arg *DeleteApplicationParams) error {
	_, err := q.db.Exec(ctx, deleteApplication, arg.Account1ID, arg.Account2ID)
	return err
}

const existsApplicationByIDWithLock = `-- name: ExistsApplicationByIDWithLock :one
select exists(
                select 1
                from applications
                where (account1_id = $1 and account2_id = $2)
                or (account1_id = $2 and account2_id = $1)
                for update )
`

type ExistsApplicationByIDWithLockParams struct {
	Account1ID int64
	Account2ID int64
}

func (q *Queries) ExistsApplicationByIDWithLock(ctx context.Context, arg *ExistsApplicationByIDWithLockParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsApplicationByIDWithLock, arg.Account1ID, arg.Account2ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getApplicationByID = `-- name: GetApplicationByID :one
select account1_id, account2_id, apply_msg, refuse_msg, status, create_at, update_at
from applications
where account1_id = $1 and account2_id = $2
limit 1
`

type GetApplicationByIDParams struct {
	Account1ID int64
	Account2ID int64
}

func (q *Queries) GetApplicationByID(ctx context.Context, arg *GetApplicationByIDParams) (*Application, error) {
	row := q.db.QueryRow(ctx, getApplicationByID, arg.Account1ID, arg.Account2ID)
	var i Application
	err := row.Scan(
		&i.Account1ID,
		&i.Account2ID,
		&i.ApplyMsg,
		&i.RefuseMsg,
		&i.Status,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return &i, err
}

const getApplications = `-- name: GetApplications :many
select app.account1_id, app.account2_id, app.apply_msg, app.refuse_msg, app.status, app.create_at, app.update_at, app.total,
       a1.name as account1_name,
       a1.avatar as account1_avatar,
       a2.name as account2_name,
       a2.avatar as account2_avatar
from accounts a1,
     accounts a2,
     (select account1_id, account2_id, apply_msg, refuse_msg, status, create_at, update_at, count(*) over () as total
      from applications
      where account1_id = $3
      or account2_id = $3
      order by create_at desc
      limit $1 offset $2) as app
where a1.id = app.account1_id
and a2.id = app.account2_id
`

type GetApplicationsParams struct {
	Limit     int32
	Offset    int32
	AccountID int64
}

type GetApplicationsRow struct {
	Account1ID     int64
	Account2ID     int64
	ApplyMsg       string
	RefuseMsg      string
	Status         Applicationstatus
	CreateAt       time.Time
	UpdateAt       time.Time
	Total          int64
	Account1Name   string
	Account1Avatar string
	Account2Name   string
	Account2Avatar string
}

func (q *Queries) GetApplications(ctx context.Context, arg *GetApplicationsParams) ([]*GetApplicationsRow, error) {
	rows, err := q.db.Query(ctx, getApplications, arg.Limit, arg.Offset, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetApplicationsRow{}
	for rows.Next() {
		var i GetApplicationsRow
		if err := rows.Scan(
			&i.Account1ID,
			&i.Account2ID,
			&i.ApplyMsg,
			&i.RefuseMsg,
			&i.Status,
			&i.CreateAt,
			&i.UpdateAt,
			&i.Total,
			&i.Account1Name,
			&i.Account1Avatar,
			&i.Account2Name,
			&i.Account2Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :exec
update applications
set status = $2,
    refuse_msg = $1
where account1_id = $3
  and account2_id = $4
`

type UpdateApplicationParams struct {
	RefuseMsg  string
	Status     Applicationstatus
	Account1ID int64
	Account2ID int64
}

func (q *Queries) UpdateApplication(ctx context.Context, arg *UpdateApplicationParams) error {
	_, err := q.db.Exec(ctx, updateApplication,
		arg.RefuseMsg,
		arg.Status,
		arg.Account1ID,
		arg.Account2ID,
	)
	return err
}
