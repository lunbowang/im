// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgtype"
)

type Applicationstatus string

const (
	ApplicationstatusValue0 Applicationstatus = "已申请"
	ApplicationstatusValue1 Applicationstatus = "已同意"
	ApplicationstatusValue2 Applicationstatus = "已拒绝"
)

func (e *Applicationstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Applicationstatus(s)
	case string:
		*e = Applicationstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Applicationstatus: %T", src)
	}
	return nil
}

type NullApplicationstatus struct {
	Applicationstatus Applicationstatus
	Valid             bool // Valid is true if Applicationstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Applicationstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Applicationstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Applicationstatus), nil
}

type Filetype string

const (
	FiletypeImg  Filetype = "img"
	FiletypeFile Filetype = "file"
)

func (e *Filetype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Filetype(s)
	case string:
		*e = Filetype(s)
	default:
		return fmt.Errorf("unsupported scan type for Filetype: %T", src)
	}
	return nil
}

type NullFiletype struct {
	Filetype Filetype
	Valid    bool // Valid is true if Filetype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFiletype) Scan(value interface{}) error {
	if value == nil {
		ns.Filetype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Filetype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFiletype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Filetype), nil
}

type Gender string

const (
	GenderValue0 Gender = "男"
	GenderValue1 Gender = "女"
	GenderValue2 Gender = "未知"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type Msgnotifytype string

const (
	MsgnotifytypeSystem Msgnotifytype = "system"
	MsgnotifytypeCommon Msgnotifytype = "common"
)

func (e *Msgnotifytype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Msgnotifytype(s)
	case string:
		*e = Msgnotifytype(s)
	default:
		return fmt.Errorf("unsupported scan type for Msgnotifytype: %T", src)
	}
	return nil
}

type NullMsgnotifytype struct {
	Msgnotifytype Msgnotifytype
	Valid         bool // Valid is true if Msgnotifytype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMsgnotifytype) Scan(value interface{}) error {
	if value == nil {
		ns.Msgnotifytype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Msgnotifytype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMsgnotifytype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Msgnotifytype), nil
}

type Relationtype string

const (
	RelationtypeGroup  Relationtype = "group"
	RelationtypeFriend Relationtype = "friend"
)

func (e *Relationtype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Relationtype(s)
	case string:
		*e = Relationtype(s)
	default:
		return fmt.Errorf("unsupported scan type for Relationtype: %T", src)
	}
	return nil
}

type NullRelationtype struct {
	Relationtype Relationtype
	Valid        bool // Valid is true if Relationtype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelationtype) Scan(value interface{}) error {
	if value == nil {
		ns.Relationtype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Relationtype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelationtype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Relationtype), nil
}

type Account struct {
	ID        int64
	UserID    int64
	Name      string
	Avatar    string
	Gender    Gender
	Signature string
	CreateAt  time.Time
}

type Application struct {
	Account1ID int64
	Account2ID int64
	ApplyMsg   string
	RefuseMsg  string
	Status     Applicationstatus
	CreateAt   time.Time
	UpdateAt   time.Time
}

type File struct {
	ID         int64
	FileName   string
	FileType   Filetype
	FileSize   int64
	Key        string
	Url        string
	RelationID sql.NullInt64
	AccountID  sql.NullInt64
	CreateAt   time.Time
}

type GroupNotify struct {
	ID            int64
	RelationID    sql.NullInt64
	MsgContent    string
	MsgExpand     pgtype.JSON
	AccountID     sql.NullInt64
	CreateAt      time.Time
	ReadIds       []int64
	MsgContentTsv interface{}
}

type Message struct {
	ID            int64
	NotifyType    Msgnotifytype
	MsgType       string
	MsgContent    string
	MsgExtend     pgtype.JSON
	FileID        sql.NullInt64
	AccountID     sql.NullInt64
	RlyMsgID      sql.NullInt64
	RelationID    int64
	CreateAt      time.Time
	IsRevoke      bool
	IsTop         bool
	IsPin         bool
	PinTime       time.Time
	ReadIds       []int64
	MsgContentTsy interface{}
}

type Relation struct {
	ID           int64
	RelationType Relationtype
	GroupType    sql.NullString
	FriendType   sql.NullString
	CreateAt     sql.NullTime
}

type Setting struct {
	AccountID    int64
	RelationID   int64
	NickName     string
	IsNotDisturb bool
	IsPin        bool
	PinTime      time.Time
	IsShow       bool
	LastShow     time.Time
	IsLeader     bool
	IsSelf       bool
}

type User struct {
	ID       int64
	Email    string
	Password string
	CreateAt time.Time
}
